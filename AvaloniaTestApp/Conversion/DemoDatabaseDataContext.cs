// Code generated by DBML To Entity Framework Converter tool
// https://github.com/EWSoftware/EntityFrameworkUtils
//
// This code will need to be reviewed and tested to fix up any issues.

// TODO: Add or remove using statements as needed
using System;
using System.Collections.Generic;
using System.Reflection;

using EWSoftware.EntityFramework;
using EWSoftware.EntityFramework.DataAnnotations;

using Microsoft.EntityFrameworkCore;

namespace AvaloniaTestApp.Database
{
    // TODO: Check \gh\EntityFrameworkUtils\LinqToSQLTestApp\Database\DemoDatabase.cs for additional code for the data context
    [ParameterNamePrefix("param")]
    public sealed class DemoDatabaseDataContext : DbContext
    {
        #region Tracked entities
        //=====================================================================

        // These entities utilize change tracking so a property is required here for them
        public DbSet<StateCode> StateCode { get; set; } = null!;

        public DbSet<ProductInfo> ProductInfo { get; set; } = null!;

        public DbSet<DemoTable> DemoTable { get; set; } = null!;

        #endregion

        #region Method overrides
        //=====================================================================

        /// <inheritdoc />
        /// <remarks>This is overridden to set the connection string to the one stored in the settings</remarks>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(LinqToSQLTestApp.Properties.Settings.Default.DemoDatabase);

            base.OnConfiguring(optionsBuilder);
        }

        /// <inheritdoc />
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            /* TODO: If you pluralize or otherwise change the entity property names above but want to
               keep the table names as they are in the database, uncomment this.
            // Make the table names match the entity types not the DbSet<T> property names
            foreach(var entityType in modelBuilder.Model.GetEntityTypes())
            {
                if(entityType.ClrType != null && entityType.GetTableName() != entityType.ClrType.Name)
                    entityType.SetTableName(entityType.ClrType.Name);
            }*/

            // TODO: If necessary define entity relationships here

            base.OnModelCreating(modelBuilder);
        }
        #endregion

        #region Stored procedure methods
        //=====================================================================

        public int spStateCodeAddUpdate(string? oldState, string? state, string? stateDesc)
        {
            return this.ExecuteMethodNonQuery(this.GetMethodInfo(), oldState, state, stateDesc).ReturnValue;
        }

        // TODO: This method is used to delete entities.  You may be able to 
        // remove it and add a DeleteEntityStoredProcedureAttribute to the 
        // entity type and use the DeleteEntity<TEntity>() or 
        // SubmitChanges<TEntity>() extension method instead.
        public int spStateCodeDelete(string? state)
        {
            return this.ExecuteMethodNonQuery(this.GetMethodInfo(), state).ReturnValue;
        }

        // TODO: This method is used to delete entities.  You may be able to 
        // remove it and add a DeleteEntityStoredProcedureAttribute to the 
        // entity type and use the DeleteEntity<TEntity>() or 
        // SubmitChanges<TEntity>() extension method instead.
        public int spProductDelete(int? productID)
        {
            return this.ExecuteMethodNonQuery(this.GetMethodInfo(), productID).ReturnValue;
        }

        // TODO: This method is used to insert entities.  You may be able to 
        // remove it and add an InsertEntityStoredProcedureAttribute to the 
        // entity type and use the InsertEntity<TEntity>() or 
        // SubmitChanges<TEntity>() extension method instead.
        // TODO: This method is used to update entities.  You may be able to 
        // remove it and add an UpdateEntityStoredProcedureAttribute to the 
        // entity type and use the UpdateEntity<TEntity>() or 
        // SubmitChanges<TEntity>() extension method instead.
        public int spProductAddUpdate(ref int? productID, string? productName, string? categoryName, string? companyName, string? quantityPerUnit, decimal? unitPrice, short? unitsInStock, short? unitsOnOrder, short? reorderLevel, bool? discontinued)
        {
            var result = this.ExecuteMethodNonQuery(this.GetMethodInfo(), productID, productName, categoryName, companyName, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued);

            productID = (int?)result.OutputValues[nameof(productID)];

            return result.ReturnValue;
        }

        // TODO: This method is used to insert entities.  You may be able to 
        // remove it and add an InsertEntityStoredProcedureAttribute to the 
        // entity type and use the InsertEntity<TEntity>() or 
        // SubmitChanges<TEntity>() extension method instead.
        // TODO: This method is used to update entities.  You may be able to 
        // remove it and add an UpdateEntityStoredProcedureAttribute to the 
        // entity type and use the UpdateEntity<TEntity>() or 
        // SubmitChanges<TEntity>() extension method instead.
        public int spDemoTableAddUpdate(ref int? listKey, string? label, string? textValue, DateTime? dateValue, bool? boolValue, System.Xml.Linq.XElement? xmlValue, Guid? guidValue, byte[]? imageValue)
        {
            var result = this.ExecuteMethodNonQuery(this.GetMethodInfo(), listKey, label, textValue, dateValue, boolValue, xmlValue, guidValue, imageValue);

            listKey = (int?)result.OutputValues[nameof(listKey)];

            return result.ReturnValue;
        }

        // TODO: This method is used to delete entities.  You may be able to 
        // remove it and add a DeleteEntityStoredProcedureAttribute to the 
        // entity type and use the DeleteEntity<TEntity>() or 
        // SubmitChanges<TEntity>() extension method instead.
        public int spDemoTableDelete(int? listKey)
        {
            return this.ExecuteMethodNonQuery(this.GetMethodInfo(), listKey).ReturnValue;
        }

        // TODO: All of this method's parameters match properties on the result set type.
        // You may be able to remove it and add a LoadByKeyStoredProcedureAttribute to
        // the result set type and use the LoadByKey<TEntity>() extension method instead 
        // if the corresponding properties are marked as the primary key.
        public IEnumerable<spProductSearchResult> spProductSearch(string? productName, string? categoryName, string? companyName)
        {
            return this.ExecuteMethodQuery<spProductSearchResult>(this.GetMethodInfo(), productName, categoryName, companyName);
        }

        // TODO: This method has no parameters.  You may be able to remove it
        // and add a LoadAllStoredProcedureAttribute to the result set type
        // and use the LoadAll<TEntity>() extension method instead.
        public IEnumerable<spCategoriesResult> spCategories()
        {
            return this.ExecuteMethodQuery<spCategoriesResult>(this.GetMethodInfo());
        }

        // TODO: This method has no parameters.  You may be able to remove it
        // and add a LoadAllStoredProcedureAttribute to the result set type
        // and use the LoadAll<TEntity>() extension method instead.
        public IEnumerable<spCompaniesResult> spCompanies()
        {
            return this.ExecuteMethodQuery<spCompaniesResult>(this.GetMethodInfo());
        }

        // TODO: This method has no parameters.  You may be able to remove it
        // and add a LoadAllStoredProcedureAttribute to the result set type
        // and use the LoadAll<TEntity>() extension method instead.
        public IEnumerable<StateCode> spStateCodes()
        {
            return this.ExecuteMethodQuery<StateCode>(this.GetMethodInfo());
        }

        // TODO: This method's parameters match the key on the result set type.  You
        // may be able to remove it and add a LoadByKeyStoredProcedureAttribute to the 
        // result set type and use the LoadByKey<TEntity>() extension method instead.
        public IEnumerable<ProductInfo> spProductInfo(int? productID)
        {
            return this.ExecuteMethodQuery<ProductInfo>(this.GetMethodInfo(), productID);
        }

        // TODO: This method has no parameters.  You may be able to remove it
        // and add a LoadAllStoredProcedureAttribute to the result set type
        // and use the LoadAll<TEntity>() extension method instead.
        public IEnumerable<DemoTable> spDemoTableData()
        {
            return this.ExecuteMethodQuery<DemoTable>(this.GetMethodInfo());
        }

        #endregion
    }
}
