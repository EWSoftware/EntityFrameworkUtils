// Code generated by DBML To Entity Framework Converter tool
// https://github.com/EWSoftware/EntityFrameworkUtils

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

using CommunityToolkit.Mvvm.ComponentModel;

using EWSoftware.EntityFramework.DataAnnotations;

namespace AvaloniaTestApp.Database
{
    [LoadAllStoredProcedure("spDemoTableData"), LoadByKeyStoredProcedure("spDemoTableInfo"),
      InsertEntityStoredProcedure("spDemoTableAddUpdate"), UpdateEntityStoredProcedure("spDemoTableAddUpdate"),
      DeleteEntityStoredProcedure("spDemoTableDelete")]
    public sealed partial class DemoTable : ObservableObject
    {
        // C# 14.0 or later allows us to use partial properties with the ObservableProperty attribute.
        [ObservableProperty, Key]
        public partial int ListKey { get; set; }

        [ObservableProperty]
        public partial string Label { get; set; } = String.Empty;

        [ObservableProperty]
        public partial string TextValue { get; set; } = String.Empty;

        [ObservableProperty]
        public partial DateTime DateValue { get; set; }

        [ObservableProperty]
        public partial bool BoolValue { get; set; }

        [ObservableProperty]
        public partial decimal DecimalValue { get; set; }

        /// <summary>
        /// Entity Framework does not support XML properties in entities so we need to ignore it.  The stored
        /// procedure extension methods do support them so we don't need an additional property to handle it.
        /// </summary>
        [ObservableProperty, NotMapped]
        public partial System.Xml.Linq.XElement? XmlValue { get; set; }

        [ObservableProperty]
        public partial Guid? GuidValue { get; set; }

        [ObservableProperty]
        public partial byte[]? ImageValue { get; set; }

        [ObservableProperty, Ignore(true, true)]
        public partial byte[] LastModified { get; set; } = [];
    }
}
