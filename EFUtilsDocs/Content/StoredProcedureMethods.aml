<?xml version="1.0" encoding="utf-8"?>
<topic id="3070da37-6ca8-48e0-b350-618489d67bc5" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<!-- Ignore Spelling: bool foreach cts -->
		
		<introduction>
      <para>When executing a stored procedure that does not return a result set or does not conform to the key
field or parameter expectations of the other extension methods, you can add stored procedure methods to the
Entity Framework data context that mimic the behavior of the stored procedure methods used by LINQ to SQL data
contexts.  These are called just like normal class methods and are passed one or more parameters if needed.  The
data context method call is translated to a stored procedure call using the given parameter values.  The called
stored procedure can be a non-query that performs an action such as an insert, update, delete, or a lookup and
returns the number of rows affected, a return value, and/or output parameter values rather than a result set.
For query stored procedure methods, the return value is an enumerable list of the given entity type created from
the query's result set.</para>

			<alert class="note">
				<para>In the extension methods below, if the data context connection is not in an open state, it is
opened temporarily while performing the action and closed again afterwards.</para>

				<para>If change tracking is enabled on the data context, any entities loaded by
<codeInline>ExecuteMethodQuery</codeInline> will be added to the change tracker.  Likewise, changes to the
entities will be tracked and their state updated accordingly when added, updated, or deleted when submitting
changes to the data context.  If change tracking is not enabled on the data context or the entity is marked with
the <codeInline>NeverTrackAttribute</codeInline>, they will not be tracked.</para>
			</alert>
			
			<autoOutline excludeRelatedTopics="true" lead="none" />
		</introduction>

		<section address="MethodStoredProc">
			<title>MethodStoredProcedureAttribute</title>
			<content>
				<para>This optional attribute is used to define the stored procedure name that will be called for the
data context method.  If not specified on a data context stored procedure method, the name of the stored
procedure is assumed to be the same as the data context method's name.</para>

				<code language="csharp">
// For these the stored procedure name is assumed to be the same as the method name	
public int spStateCodeAddUpdate(string? oldState, string? state, string? stateDesc)
{
    return this.ExecuteMethodNonQuery((MethodInfo)MethodInfo.GetCurrentMethod()!, oldState,
        state, stateDesc).ReturnValue;
}

public int spStateCodeDelete(string? state)
{
    return this.ExecuteMethodNonQuery((MethodInfo)MethodInfo.GetCurrentMethod()!,
        state).RowsAffected;
}

public IEnumerable&lt;spProductSearchResult&gt; spProductSearch(string? productName, string? categoryName,
    string? companyName)
{
    return this.ExecuteMethodQuery&lt;spProductSearchResult&gt;((MethodInfo)MethodInfo.GetCurrentMethod()!,
        productName, categoryName, companyName);
}

// Or we can change the method name to something else and specify the stored
// procedure name with the attribute.
[MethodStoredProcedure("spStateCodeAddUpdate")]
public int AddOrUpdateStateCode(string? oldState, string? state, string? stateDesc)
{
    return this.ExecuteMethodNonQuery((MethodInfo)MethodInfo.GetCurrentMethod()!, oldState,
        state, stateDesc).ReturnValue;
}

[MethodStoredProcedure("spStateCodeDelete")]
public int DeleteStateCode(string? state)
{
    return this.ExecuteMethodNonQuery((MethodInfo)MethodInfo.GetCurrentMethod()!, state).ReturnValue;
}

[MethodStoredProcedure("spProductSearch")]
public IEnumerable&lt;ProductSearchResult&gt; SearchForProducts(string? productName, string? categoryName,
    string? companyName)
{
    return this.ExecuteMethodQuery&lt;ProductSearchResult&gt;((MethodInfo)MethodInfo.GetCurrentMethod()!,
        productName, categoryName, companyName);
}
				</code>
			</content>
		</section>

		<section address="NonQueryMethods">
			<title>Non-Query Stored Procedure Methods</title>
			<content>
				<para>A non-query stored procedure method is one that does not return a result set.  Instead it returns
the number of rows affected, a return value, and/or output parameter values.  The data context method calls the
<codeEntityReference qualifyHint="false" autoUpgrade="true">M:EWSoftware.EntityFramework.DatabaseExtensions.ExecuteMethodNonQuery(Microsoft.EntityFrameworkCore.DbContext,System.Reflection.MethodInfo,System.Object[])</codeEntityReference>
extension method.  The first parameter is always a <codeInline>MethodInfo</codeInline> instance representing the
calling method.  Subsequent parameters, if any, are those passed to the data context method.  The order of the
parameters must match the order for the calling data context method.  Any parameters for which output values are
needed should be passed to the data context method by reference.  However, they are not passed by reference to
the extension method.</para>

				<para>The return value is a tuple containing the number of rows affected assuming the stored procedure
does not use <codeInline>SET NOCOUNT ON</codeInline>, the return value of the stored procedure if any, and a
dictionary containing any output parameters indexed by method parameter name with the value being the output
value from the stored procedure.  Typically, the data context method will return the rows affected or return
value or use the output parameters to update the reference method parameters and return nothing.  However, unlike
LINQ to SQL, the tuple itself or any combination of the above can be returned by the Entity Framework data
context method.</para>

				<code language="cs">
// Execute a stored procedure and return its return value
public int spStockAdd(string symbol, string assetDescription, decimal currentBid,
  decimal currentAsk, decimal priceChangePercent)
{
    return this.ExecuteMethodNonQuery((MethodInfo)MethodInfo.GetCurrentMethod()!,
        symbol, assetDescription, currentBid, currentAsk, priceChangePercent).ReturnValue;
}

// Execute a stored procedure and return the number of rows affected
public int spStockDelete(string symbol)
{
    return this.ExecuteMethodNonQuery((MethodInfo)MethodInfo.GetCurrentMethod()!,
        symbol).RowsAffected;
}

// Execute a stored procedure and return the output parameters via the ref parameters on
// the method.  We can also return the stored procedure's return value or rows affected.
public int spCheckForEmployeeSchedule(string bidGroup, int entityKey,
  ref bool bidGroupScheduled, ref bool entityScheduled)
{
    var result = this.ExecuteMethodNonQuery((MethodInfo)MethodInfo.GetCurrentMethod()!,
        bidGroup, entityKey, bidGroupScheduled, entityScheduled);

    bidGroupScheduled = (bool)result.OutputValues[nameof(bidGroupScheduled);
    entityScheduled = (bool)result.OutputValues[nameof(entityScheduled);

    return result.ReturnValue;
}
				</code>
			</content>
		</section>

		<section address="QueryMethods">
			<title>Query Stored Procedure Methods</title>
			<content>
				<para>A query stored procedure method is similar to the <codeInline>LoadByKey</codeInline> extension
method except the parameters do not have to match the key properties on the entity such as a search query that
allows for various criteria parameters.  If no parameters are specified it is equivalent to the
<codeInline>LoadAll</codeInline> extension method so it is not necessary to create a separate data context method
for those cases.</para>

				<para>The data context method calls the
<codeEntityReference qualifyHint="false" autoUpgrade="true">M:EWSoftware.EntityFramework.DatabaseExtensions.ExecuteMethodQuery``1(Microsoft.EntityFrameworkCore.DbContext,System.Reflection.MethodInfo,System.Object[])</codeEntityReference>				
extension method. As above, the first parameter is always a <codeInline>MethodInfo</codeInline> instance
representing the calling method.  Subsequent parameters, if any, are those passed to the data context method.
The order of the parameters must match the order for the calling data context method.  All parameters are input
only.  The return value of the data context method is an enumerable list of the given entity type created from
the query's result set.</para>
				
				<code language="cs">
// Execute a search stored procedure and return its result set
public IEnumerable&lt;spTransactionListResult&gt; spTransactionList(int accountKey,
  string? symbol, DateTime fromDate, DateTime toDate, string? txType)
{
    return this.ExecuteMethodQuery&lt;spTransactionListResult&gt;(
        (MethodInfo)MethodInfo.GetCurrentMethod()!, accountKey, symbol,
        fromDate, toDate, txType);
}
				</code>
			</content>
		</section>

		<section address="AsyncSupport">
			<title>Differences for the Asynchronous Extension Methods</title>
			<content>
				<para>The asynchronous versions of the query and non-query extension methods require a few modifications
in order to use them correctly.</para>

				<list class="bullet">
					<listItem>
						<para>If you follow convention and suffix the method name with "Async", you will likely need to use
the <codeInline>MethodStoredProcedureAttribute</codeInline> on it to specify the stored procedure name without
the suffix.</para>
					</listItem>
					<listItem>
						<para>The method information must be obtained using the stack trace to find the actual called method.
This is required because the code within the stored procedure method is rewritten by the compiler and is
placed inside a separate compiler generated method.</para>
					</listItem>

					<listItem>
						<para>The method parameters must be passed to the extension method as an array.  This is necessary
as the last parameter for the extension method is the optional cancellation token.</para>
					</listItem>

					<listItem>
						<para>A cancellation token cannot be passed explicitly to the stored procedure method as it will be
considered one of the stored procedure parameters and the method parameter count will not match the number of
parameters passed to the extension method.  The
<codeEntityReference qualifyHint="false" autoUpgrade="true">M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)</codeEntityReference>
extension method can be used instead to achieve the same result.</para>
					</listItem>
				</list>

				<para>Some examples are shown below.</para>

				<code language="cs">
// Execute a stored procedure and return its return value
[MethodStoredProcedure("spStockAdd")]
public async int spStockAddAsync(string symbol, string assetDescription,
  decimal currentBid, decimal currentAsk, decimal priceChangePercent)
{
    // When called asynchronously, the parameters must be passed as an array
    // and we must get the method info from the stack trace as we're inside the
    // compiler generated state machine at this point.  We must also specify the
    // stored procedure name in the method attribute if the method name does not
    // match the stored procedure name.
    var methodInfo = (MethodInfo)(new StackTrace().GetFrames().Select(
        frame => frame.GetMethod()).FirstOrDefault(
            item => item!.DeclaringType == GetType()) ??
               throw new InvalidOperationException("Unable to get async method info"));

    var result = await this.ExecuteMethodNonQueryAsync(methodInfo, [symbol,
        assetDescription, currentBid, currentAsk, priceChangePercent]);

    return result.ReturnValue;
}

// Execute a stored procedure and return the number of rows affected
[MethodStoredProcedure("spStockDelete")]
public async int spStockDeleteAsync(string symbol)
{
    // When called asynchronously, the parameters must be passed as an array
    // and we must get the method info from the stack trace as we're inside the
    // compiler generated state machine at this point.  We must also specify the
    // stored procedure name in the method attribute if the method name does not
    // match the stored procedure name.
    var methodInfo = (MethodInfo)(new StackTrace().GetFrames().Select(
        f => f.GetMethod()).FirstOrDefault(m => m!.DeclaringType == GetType()) ??
            throw new InvalidOperationException("Unable to get async method info"));

    var result = await this.ExecuteMethodNonQueryAsync(methodInfo, [symbol]);

    return result.RowsAffected;
}

// Execute a stored procedure and return the output parameters via the ref parameters on
// the method.  We can also return the stored procedure's return value or rows affected.
[MethodStoredProcedure("spCheckForEmployeeSchedule")]
public async int spCheckForEmployeeScheduleAsync(string bidGroup, int entityKey,
  ref bool bidGroupScheduled, ref bool entityScheduled)
{
    // When called asynchronously, the parameters must be passed as an array
    // and we must get the method info from the stack trace as we're inside the
    // compiler generated state machine at this point.  We must also specify the
    // stored procedure name in the method attribute if the method name does not
    // match the stored procedure name.
    var methodInfo = (MethodInfo)(new StackTrace().GetFrames().Select(
        f => f.GetMethod()).FirstOrDefault(m => m!.DeclaringType == GetType()) ??
            throw new InvalidOperationException("Unable to get async method info"));

    var result = await this.ExecuteMethodNonQueryAsync(methodInfo, [bidGroup, entityKey,
        bidGroupScheduled, entityScheduled]);

    bidGroupScheduled = (bool)result.OutputValues[nameof(bidGroupScheduled);
    entityScheduled = (bool)result.OutputValues[nameof(entityScheduled);

    return result.ReturnValue;
}

// Execute a search stored procedure and return its result set
[MethodStoredProcedure("spTransactionList")]
public IAsyncEnumerable&lt;spTransactionListResult&gt; spTransactionListAsync(int accountKey,
  string? symbol, DateTime fromDate, DateTime toDate, string? txType)
{
    // When called asynchronously, the parameters must be passed as an array
    // and we must get the method info from the stack trace as we're inside the
    // compiler generated state machine at this point.  We must also specify the
    // stored procedure name in the method attribute if the method name does not
    // match the stored procedure name.
    var methodInfo = (MethodInfo)(new StackTrace().GetFrames().Select(
        f => f.GetMethod()).FirstOrDefault(m => m!.DeclaringType == GetType()) ??
            throw new InvalidOperationException("Unable to get async method info"));

    // Note that we can't pass a cancellation token as it would look like one of
    // the method parameters.  Use the WithCancellation() extension method on the
    // call to this method instead.
    return this.ExecuteMethodQueryAsync&lt;spTransactionListResult&gt;(methodInfo,
        [accountKey, symbol, fromDate, toDate, txType]);
}

// We can't pass the cancellation token to the query method as it will look like
// a parameter to the stored procedure.  We need to use the WithCancellation()
// extension method instead.
var cts = new CancellationTokenSource();

await foreach(var t in dc.spTransactionList(1, "MSFT", fromDate,
    toDate, null).WithCancellation(cts.Token))
{
    ....
}

				</code>
			</content>
		</section>
		
		<relatedTopics>
			<link xlink:href="48c2006f-d738-40a1-a486-d53fbdf7208c" />
		</relatedTopics>
  </developerConceptualDocument>
</topic>
