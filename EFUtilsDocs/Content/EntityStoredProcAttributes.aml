<?xml version="1.0" encoding="utf-8"?>
<topic id="869efb41-378c-426e-a84a-b014b72d1772" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>This topic describes the general and stored procedure data annotation attributes that can be applied
to entities and their properties.</para>

			<alert class="note">
				<para>The load all, load by key, insert, update, and delete stored procedure attributes are all derived
from a common base class (<codeEntityReference qualifyHint="false">T:EWSoftware.EntityFramework.DataAnnotations.StoredProcedureAttribute</codeEntityReference>).
All take a stored procedure name as the constructor parameter and have an optional
<codeInline>ParameterNamePrefix</codeInline> property that allows you to specify a common parameter name prefix
applied to its parameters.  If specified, it will override any corresponding parameter name prefix defined on the
data context.  If set to an empty string, it will effectively remove the prefix from parameters for the stored
procedure even if one is defined on the data context.</para>
			</alert>

			<autoOutline excludeRelatedTopics="true" lead="none" />
		</introduction>

		<section address="NeverTrack">
			<title>NeverTrackAttribute</title>
			<content>
				<para>If change tracking is enabled on a data context, the stored procedure extension methods that load,
insert, update, and delete entities will automatically adjust the entity state with the change tracker.  This
attribute is used to mark an entity type as never tracked so that the stored procedure extension methods do not
alter the change tracking state for it.  This is useful for entities that are not modified and/or do not
implement property change notification and thus do not require change tracking.</para>
				
				<code language="cs">
// Used to display state codes in a drop-down list.  This is never modified and does
// not need change tracking.
[NeverTrack]
public sealed class StateCode
{
    // The state code
    public string StateCode { get; set; }
    
    // The state description
    public string StateDesc { get; set; }
}
				</code>
				
			</content>
		</section>

		<section address="Ignore">
			<title>IgnoreAttribute</title>
			<content>
				<para>Unlike entities loaded by Entity Framework, the stored procedure extension methods do not require
a one to one mapping between the result set columns and entity properties.  As such, additional properties can
be added to the entities that do not appear in the result set and vice versa.  This attribute can be applied to
entity properties to indicate whether or not they should be included for inserts and/or updates.  It takes two
Boolean parameters, the first for whether or not to include it for inserts, and the second for updates.
Typically, both parameters are set to false but it is possible to set one or the other to true to include the
property for insert or updates if required.</para>

				<code language="csharp">
[LoadAllStoredProcedure("spStateCodes"), InsertStoredProcedure("spStateCodeAddUpdate"),
  UpdateStoredProcedure("spStateCodeAddUpdate"), DeleteStoredProcedure("spStateCodeDelete")]
public sealed class StateCode : ChangeTrackingEntity
{
    // The state code
    [Key]
    public string State
    {
        get;
        set => this.SetWithNotify(value, ref field);
    } = String.Empty;

    // The state description
    public string StateDesc
    {
        get;
        set => this.SetWithNotify(value, ref field);
    } = String.Empty;

    // True if in use and cannot be deleted, false if not.  This is an extra column in
    // the load all stored procedure and we'll ignore it for inserts and updates.
    [Ignore(true, true)]
    public bool IsInUse
    {
        get;
        set => this.SetWithNotify(value, ref field);
    }
}

// Example Load All usage:
using var dataContext = new DemoDatabaseDataContext();

var stateCodes = dc.LoadAll&lt;StateCode&gt;().ToList();
				</code>
			</content>
		</section>

		<!-- StoredProcedureAttribute is the base -->
		<section address="LoadAll">
			<title>LoadAllStoredProcedureAttribute</title>
			<content>
				<para>This attribute can be applied to an entity type to define a stored procedure used to load them that
takes no parameters.  The 
<codeEntityReference qualifyHint="false" autoUpgrade="true">M:EWSoftware.EntityFramework.DatabaseExtensions.LoadAll``1(Microsoft.EntityFrameworkCore.DbContext)</codeEntityReference>
extension method uses this attribute to determine the stored procedure it should call.  See the
<codeInline>IgnoreAttribute</codeInline> section above for an example.</para>
			</content>
		</section>

		<section address="LoadByKey">
			<title>LoadByKeyStoredProcedureAttribute</title>
			<content>
				<para>This attribute can be applied to an entity type to define a stored procedure used to load them
using the values for the key properties defined on the type.  The 
<codeEntityReference qualifyHint="false" autoUpgrade="true">M:EWSoftware.EntityFramework.DatabaseExtensions.LoadByKey``1(Microsoft.EntityFrameworkCore.DbContext,System.Object[])</codeEntityReference>
extension method uses this attribute to determine the stored procedure it should call.  The <codeInline>PrimaryKey</codeInline>
attribute on the type or the <codeInline>Key</codeInline> attributes on the properties are used to determine the
key for the type.  There must be one stored procedure parameter for each key property on the type.</para>
				
				<code language="csharp">
[LoadByKeyStoredProcedure("spProductInfo"), InsertEntityStoredProcedure("spProductAddUpdate"),
  UpdateEntityStoredProcedure("spProductAddUpdate"), DeleteEntityStoredProcedure("spProductDelete")]
public sealed class ProductInfo : ChangeTrackingEntity
{
    // The primary key
    [Key]
    public int ProductID
    {
        get;
        set => this.SetWithNotify(value, ref field);
    }
    
    // Product name
    public string? ProductName
    {
        get;
        set => this.SetWithNotify(value, ref field);
    }

    ...
}

// Example Load By Key usage:
using var dataContext = new DemoDatabaseDataContext();

var productInfo = dc.LoadByKey&lt;ProductInfo&gt;(productID).Single();

// Add a new entity
var newProduct = new ProductInfo { ProductName = "New Product" };

dataContext.InsertEntity(newProduct);

// Update an existing entity
productInfo.ProductName = "Updated Product";

dataContext.UpdateEntity(productInfo);

// Delete an entity
dataContext.DeleteEntity(productInfo);

// Since change tracking is enabled, we could also have just submitted the changes:
// dataContext.SubmitChanges&lt;ProductInfo&gt;();
				</code>
			</content>
		</section>

		<section address="Insert">
			<title>InsertEntityStoredProcedureAttribute</title>
			<content>
				<para>This attribute is used to specify the stored procedure used to insert entities for the associated
type.  The stored procedure should have one or more parameters representing all of the properties
on the entity type except those marked with an <codeInline>IgnoreAttribute</codeInline> for inserts.  It should
not return a value or a result set.  Parameters related to properties that are part of the primary key
or are marked with the <codeInline>TimestampAttribute</codeInline> are defined as input/out parameters.  All
other parameters are input only.  See the <codeInline>LoadByKeyAttribute</codeInline> section above for an example.</para>
			</content>
		</section>

		<section address="Update">
			<title>UpdateEntityStoredProcedureAttribute</title>
			<content>
				<para>This attribute is used to specify the stored procedure used to update entities for the associated
type.  The stored procedure should have one or more parameters representing all of the properties
on the entity type except those marked with an <codeInline>IgnoreAttribute</codeInline> for updates.  It should
not return a value or a result set.  Parameters marked with the <codeInline>TimestampAttribute</codeInline> are
defined as input/out parameters.  All other parameters are input only.  See the <codeInline>LoadByKeyAttribute</codeInline>
section above for an example.</para>
			</content>
		</section>

		<section address="Delete">
			<title>DeleteEntityStoredProcedureAttribute</title>
			<content>
				<para>This attribute is used to specify the stored procedure used to delete entities for the associated
type.  The stored procedure should have one or more parameters representing the key columns on the entity type
identified with a <codeInline>PrimaryKeyAttribute</codeInline> or one or more properties with a
<codeInline>KeyAttribute</codeInline> or defined by the data context.  It should not return a value or a result
set.  All parameters are input only.  See the <codeInline>LoadByKeyAttribute</codeInline> section above for an
example.</para>
			</content>
		</section>

		<relatedTopics>
			<link xlink:href="48c2006f-d738-40a1-a486-d53fbdf7208c" />
		</relatedTopics>
	</developerConceptualDocument>
</topic>
