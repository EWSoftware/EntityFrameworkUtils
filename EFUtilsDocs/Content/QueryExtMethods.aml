<?xml version="1.0" encoding="utf-8"?>
<topic id="fcc7cc28-ad7d-463d-84aa-723766215811" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>This topic describes the query related data context extension methods that work in conjunction with
the <link xlink:href="869efb41-378c-426e-a84a-b014b72d1772" /> to load, add, update, or delete rows.</para>

			<alert class="note">
				<para>In all of the extension methods below, if the data context connection is not in an open state, it
is opened temporarily while performing the action and closed again afterwards.</para>

				<para>If change tracking is enabled on the data context, any loaded
entities will be added to the change tracker.  Likewise, changes to the entities will be tracked and their
state updated accordingly when added, updated, or deleted when submitting changes to the data context.  If change
tracking is not enabled on the data context or the entity is marked with the <codeInline>NeverTrackAttribute</codeInline>,
they will not be tracked.</para>
			</alert>

			<autoOutline excludeRelatedTopics="true" lead="none" />
		</introduction>

		<section address="LoadAll">
			<title>LoadAll</title>
			<content>
				<para>This extension method is used to load all entities of the given type using a stored procedure
defined on the entity type.  The stored procedure name is determined by looking for the
<codeInline>LoadAllStoredProcedureAttribute</codeInline> on the entity type.  The stored procedure should not
have any parameters or only parameters with acceptable default values in order to return all rows.</para>
				
				<code language="cs">
using var dataContext = new MyDbContext();

var watchList = dataContext.LoadAll&lt;WatchList&gt;().ToList();
				</code>
			</content>
		</section>

		<section address="LoadByKey">
			<title>LoadByKey</title>
			<content>
				<para>This extension method is used to load all entities of the given type using a stored procedure
defined on the entity type using the given key value(s).  The stored procedure name is determined by looking for
the <codeInline>LoadByKeyStoredProcedureAttribute</codeInline> on the entity type.  The stored procedure should
have a parameter for each of the passed key values.  The parameter order typically matches the declared key order
on the entity or the parameter order of the stored procedure but does not have to.</para>
				
				<code language="cs">
using var dataContext = new MyDbContext();

var assetInfo = dataContext.LoadByKey&lt;Asset&gt;(assetKey).Single();
				</code>
			</content>
		</section>

		<section address="InsertEntity">
			<title>InsertEntity</title>
			<content>
				<para>This extension method is used to insert the given entity using a stored procedure defined on the
entity type.  The stored procedure name is determined by looking for the
<codeInline>InsertEntityStoredProcedureAttribute</codeInline> on the entity type.  The stored procedure must
have parameters for each of the entity properties except those marked with the
<codeInline>IgnoreAttribute</codeInline> for inserts.  It should not return a value or a result set.  Parameters
related to the primary key (single column, integer only) or marked with the <codeInline>TimestampAttribute</codeInline>
are defined as input/out parameters.  All other parameters are input only.</para>
				
				<code language="cs">
using var dataContext = new MyDbContext();

if(watchListItem.WatchID == 0)
    dataContext.InsertEntity(watchListItem);
else
    dataContext.UpdateEntity(watchListItem);
				</code>
			</content>
		</section>

		<section address="UpdateEntity">
			<title>UpdateEntity</title>
			<content>
				<para>This extension method is used to update the given entity using a stored procedure defined on the
entity type.  The stored procedure name is determined by looking for the
<codeInline>UpdateEntityStoredProcedureAttribute</codeInline> on the entity type.  The stored procedure must
have parameters for each of the entity properties except those marked with the
<codeInline>IgnoreAttribute</codeInline> for updates.  It should not return a value or a result set.  Parameters
marked with the <codeInline>TimestampAttribute</codeInline> are defined as input/out parameters.  All other
parameters are input only.</para>
				
				<code language="cs">
using var dataContext = new MyDbContext();

if(watchListItem.WatchID == 0)
    dataContext.InsertEntity(watchListItem);
else
    dataContext.UpdateEntity(watchListItem);
				</code>
			</content>
		</section>

		<section address="DeleteEntity">
			<title>DeleteEntity</title>
			<content>
				<para>This extension method is used to delete the given entity using a stored procedure defined on the
entity type.  The stored procedure name is determined by looking for the
<codeInline>DeleteEntityStoredProcedureAttribute</codeInline> on the entity type.  The stored procedure must have
one or more parameters representing the key columns on the entity type identified with a
<codeInline>PrimaryKeyAttribute</codeInline> or one or more properties with a <codeInline>KeyAttribute</codeInline>
or defined by the data context.  It should not return a value or a result set.  All parameters are input only.</para>
				
				<code language="cs">
using var dataContext = new MyDbContext();

dataContext.DeleteEntity(watchListItem);
				</code>
			</content>
		</section>

		<section address="SubmitChanges">
			<title>SubmitChanges (2 overloads)</title>
			<content>
				<para>The <codeInline>SubmitChanges</codeInline> methods are used to submit all tracked add, update, and
delete changes for the given entity type.</para>

				<para>The first overload is similar to the <codeInline>SaveChanges</codeInline> method on the data
context except that it only submits changes for the specified entity type.  The insert, update, and delete
stored procedures are determined by looking for the <codeInline>InsertEntityStoredProcedureAttribute</codeInline>,
<codeInline>UpdateEntityStoredProcedureAttribute</codeInline>, and <codeInline>DeleteEntityStoredProcedureAttribute</codeInline>
attributes on the entity type.  It will get the changed entities from the data context's change tracker and
submit them accordingly using the extension methods described above.  The state of the entities is also updated
to reflect that they are in an unchanged state after being added or updated or detached if deleted.</para>
				
				<code language="cs">
if(dataContext.HasChanges())
    dataContext.SubmitEntityChanges&lt;Account&gt;();
				</code>

				<para>The second overload allows you to specify functions that allow for custom handling of insert,
update, and delete operations for the given entity type.  This will get the changed entities from the data
context's change tracker and submit them accordingly using the given functions.  If the corresponding function
returns true, the state of the entity is updated to reflect that it is in an unchanged state after being added or
updated or detached if deleted.  If it returns false, the entity is left in its changed state and no action is
taken.  If a function delegate is not supplied for an operation, no action is taken.  The functions are passed
the entity entry from the change tracker so that they can determine what to do based on the changed state.</para>
				
				<code language="cs">
if(dataContext.HasChanges())
{
    // Submit changes using stored procedure methods on the data context
    dataContext.SubmitChanges&lt;StateCode&gt;(
        e =&gt;
        {
            // Insert a new state code
            dataContext.spStateCodeAddUpdate(null, e.Entity.State, e.Entity.StateDesc);
            return true;
        },
        e =&gt;
        {
            // Update an existing state code possibly changing the key
            dataContext.spStateCodeAddUpdate((string?)e.OriginalValues[nameof(StateCode.State)],
                e.Entity.State, e.Entity.StateDesc);
            return true;
        },
        e =&gt;
        {
            // Delete an existing state code
            dataContext.spStateCodeDelete((string?)e.OriginalValues[nameof(StateCode.State)]);
            return true;
        });
}
				</code>
			</content>
		</section>

		<relatedTopics>
			<link xlink:href="48c2006f-d738-40a1-a486-d53fbdf7208c" />
		</relatedTopics>
	</developerConceptualDocument>
</topic>
