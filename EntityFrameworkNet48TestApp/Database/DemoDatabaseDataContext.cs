// Code generated by DBML To Entity Framework Converter tool
// https://github.com/EWSoftware/EntityFrameworkUtils

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading.Tasks;

using EWSoftware.EntityFramework;
using EWSoftware.EntityFramework.DataAnnotations;

using Microsoft.EntityFrameworkCore;

namespace EntityFrameworkNet48TestApp.Database
{
    [ParameterNamePrefix("param")]
    public sealed class DemoDatabaseDataContext : DbContext
    {
        #region Properties
        //=====================================================================

        /// <summary>
        /// This is used to set the database location for the demo
        /// </summary>
        public static string DatabaseLocation { get; set; }

        #endregion

        #region Tracked entities
        //=====================================================================

        // These entities utilize change tracking so a property is required here for them
        public DbSet<StateCode> StateCodes { get; set; }

        public DbSet<DemoTable> DemoTable { get; set; }

        public DbSet<ProductInfo> ProductInfo { get; set; }

        #endregion

        #region Method overrides
        //=====================================================================

        /// <inheritdoc />
        /// <remarks>This is overridden to set the connection string to the one stored in the settings</remarks>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if(String.IsNullOrWhiteSpace(DatabaseLocation))
                throw new InvalidOperationException("The database location has not been set");

            optionsBuilder.UseSqlServer($@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFileName={DatabaseLocation}");

            base.OnConfiguring(optionsBuilder);
        }

        /// <inheritdoc />
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Make the table names match the entity types not the DbSet<T> property names
            foreach(var entityType in modelBuilder.Model.GetEntityTypes())
            {
                if(entityType.ClrType != null && entityType.GetTableName() != entityType.ClrType.Name)
                    entityType.SetTableName(entityType.ClrType.Name);
            }

            base.OnModelCreating(modelBuilder);
        }
        #endregion

        #region Stored procedure methods
        //=====================================================================

        /// <summary>
        /// Add or update a state code
        /// </summary>
        /// <param name="oldState">The old state code or null if adding a new one</param>
        /// <param name="state">The new/updated state code</param>
        /// <param name="stateDesc">The state description</param>
        /// <returns></returns>
        public int spStateCodeAddUpdate(string oldState, string state, string stateDesc)
        {
            return this.ExecuteMethodNonQuery(this.GetMethodInfo(), oldState, state, stateDesc).ReturnValue;
        }

        /// <summary>
        /// Add or update a state code asynchronously
        /// </summary>
        /// <param name="oldState">The old state code or null if adding a new one</param>
        /// <param name="state">The new/updated state code</param>
        /// <param name="stateDesc">The state description</param>
        /// <returns>The return value of the stored procedure</returns>
        //[MethodStoredProcedure(nameof(spStateCodeAddUpdate))]
        public async Task<int> spStateCodeAddUpdateAsync(string oldState, string state, string stateDesc)
        {
            // When called asynchronously, the parameters must be passed as an array.  We must also specify the
            // stored procedure name in the method attribute if the method name does not match the stored
            // procedure name.
            var result = await this.ExecuteMethodNonQueryAsync(this.GetMethodInfo(), new[] { oldState, state,
                stateDesc });

            return result.ReturnValue;
        }

        /// <summary>
        /// Delete a state code
        /// </summary>
        /// <param name="state">The state code to delete</param>
        /// <returns>The return value of the stored procedure</returns>
        public int spStateCodeDelete(string state)
        {
            return this.ExecuteMethodNonQuery(this.GetMethodInfo(), state).ReturnValue;
        }

        /// <summary>
        /// Delete a state code asynchronously
        /// </summary>
        /// <param name="state">The state code to delete</param>
        /// <returns>The return value of the stored procedure</returns>
        //[MethodStoredProcedure(nameof(spStateCodeDelete))]
        public async Task<int> spStateCodeDeleteAsync(string state)
        {
            // When called asynchronously, the parameters must be passed as an array.  We must also specify the
            // stored procedure name in the method attribute if the method name does not match the stored
            // procedure name.
            var result = await this.ExecuteMethodNonQueryAsync(this.GetMethodInfo(), new[] { state });

            return result.ReturnValue;
        }

        /// <summary>
        /// Search for products
        /// </summary>
        /// <param name="productName">The product name</param>
        /// <param name="categoryName">The category name</param>
        /// <param name="companyName">The company name</param>
        /// <returns>An enumerable list of the found products</returns>
        public IEnumerable<spProductSearchResult> spProductSearch(string productName, string categoryName,
            string companyName)
        {
            return this.ExecuteMethodQuery<spProductSearchResult>(this.GetMethodInfo(), productName, categoryName,
                companyName);
        }

        /// <summary>
        /// Search for products asynchronously
        /// </summary>
        /// <param name="productName">The product name</param>
        /// <param name="categoryName">The category name</param>
        /// <param name="companyName">The company name</param>
        /// <returns>An enumerable list of the found products</returns>
        //[MethodStoredProcedure(nameof(spProductSearch))]
        public IAsyncEnumerable<spProductSearchResult> spProductSearchAsync(string productName,
          string categoryName, string companyName)
        {
            // When called asynchronously, the parameters must be passed as an array.  We must also specify the
            // stored procedure name in the method attribute if the method name does not match the stored
            // procedure name.

            // Note that we can't pass a cancellation token as it would look like one of the method parameters.
            // Use the WithCancellation() extension method on the call to this method instead.
            return this.ExecuteMethodQueryAsync<spProductSearchResult>(this.GetMethodInfo(), new[] { productName,
                categoryName, companyName });
        }
        #endregion
    }
}
