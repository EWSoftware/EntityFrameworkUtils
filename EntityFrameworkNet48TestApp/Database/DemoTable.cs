// Code generated by DBML To Entity Framework Converter tool
// https://github.com/EWSoftware/EntityFrameworkUtils

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

using EWSoftware.EntityFramework;
using EWSoftware.EntityFramework.DataAnnotations;

namespace EntityFrameworkNet48TestApp.Database
{
    [LoadAllStoredProcedure("spDemoTableData"), LoadByKeyStoredProcedure("spDemoTableInfo"),
      InsertEntityStoredProcedure("spDemoTableAddUpdate"), UpdateEntityStoredProcedure("spDemoTableAddUpdate"),
      DeleteEntityStoredProcedure("spDemoTableDelete")]
    public sealed class DemoTable : ChangeTrackingEntity
    {
        private int _listKey;

        [Key]
        public int ListKey
        {
            get => _listKey;
            set => this.SetWithNotify(value, ref _listKey);
        }

        private string _label;

        public string Label
        {
            get => _label;
            set => this.SetWithNotify(value, ref _label);
        }

        private string _textValue;

        public string TextValue
        {
            get => _textValue;
            set => this.SetWithNotify(value, ref _textValue);
        }

        private DateTime _dateValue;

        public DateTime DateValue
        {
            get => _dateValue;
            set => this.SetWithNotify(value, ref _dateValue);
        }

        private bool _boolValue;

        public bool BoolValue
        {
            get => _boolValue;
            set => this.SetWithNotify(value, ref _boolValue);
        }

        private decimal _decimalValue;

        public decimal DecimalValue
        {
            get => _decimalValue;
            set => this.SetWithNotify(value, ref _decimalValue);
        }

        private System.Xml.Linq.XElement _xmlValue;

        /// <summary>
        /// Entity Framework does not support XML properties in entities so we need to ignore it.  The stored
        /// procedure extension methods do support them so we don't need an additional property to handle it.
        /// </summary>
        [NotMapped]
        public System.Xml.Linq.XElement XmlValue
        {
            get => _xmlValue;
            set => this.SetWithNotify(value, ref _xmlValue);
        }

        private Guid? _guidValue;

        public Guid? GuidValue
        {
            get => _guidValue;
            set => this.SetWithNotify(value, ref _guidValue);
        }

        private byte[] _imageValue;

        public byte[] ImageValue
        {
            get => _imageValue;
            set => this.SetWithNotify(value, ref _imageValue);
        }

        private byte[] _lastModified;

        [Ignore(true, true)]
        public byte[] LastModified
        {
            get => _lastModified;
            set => this.SetWithNotify(value, ref _lastModified);
        }
    }
}
