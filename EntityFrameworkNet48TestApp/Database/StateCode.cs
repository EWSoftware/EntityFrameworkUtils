// Code generated by DBML To Entity Framework Converter tool
// https://github.com/EWSoftware/EntityFrameworkUtils

using System;
using System.ComponentModel.DataAnnotations;

using EWSoftware.EntityFramework;
using EWSoftware.EntityFramework.DataAnnotations;

namespace EntityFrameworkNet48TestApp.Database
{
    [LoadAllStoredProcedure("spStateCodes")]
    public sealed class StateCode : ChangeTrackingEntity
    {
        private string _state;

        public string State
        {
            get => _state;
            set => this.SetWithNotify(value, ref _state);
        }

        private string _stateDesc;

        public string StateDesc
        {
            get => _stateDesc;
            set => this.SetWithNotify(value, ref _stateDesc);
        }

        private byte[] _lastModified;

        /// <summary>A fake primary key</summary>
        /// <remarks>The <see cref="State"/> is the actual key but it is mutable so we can't use it for
        /// change tracking.  As a hack, we use the last modified time stamp instead.  We also can't use the
        /// insert, update, and delete stored procedure attributes for this entity.</remarks>
        [Key, Ignore(true, true)]
        public byte[] LastModified
        {
            get => _lastModified;
            set => this.SetWithNotify(value, ref _lastModified);
        }

        private bool _isInUse;

        [Ignore(true, true)]
        public bool IsInUse
        {
            get => _isInUse;
            set => this.SetWithNotify(value, ref _isInUse);
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <remarks>This assigns a value to the <see cref="LastModified"/> property to serve as a unique key
        /// for change tracking.</remarks>
        public StateCode()
        {
            this.LastModified = BitConverter.GetBytes(DateTime.Now.Ticks);
        }
    }
}
