// Code generated by DBML To Entity Framework Converter tool
// https://github.com/EWSoftware/EntityFrameworkUtils
//
// This code will need to be reviewed and tested to fix up any issues.

// TODO: Add or remove using statements as needed
using System;
using System.ComponentModel.DataAnnotations;

using EWSoftware.EntityFramework;
using EWSoftware.EntityFramework.DataAnnotations;

namespace EntityFrameworkNet8TestApp.Database
{
    [InsertEntityStoredProcedure("spProductAddUpdate"), UpdateEntityStoredProcedure("spProductAddUpdate"), DeleteEntityStoredProcedure("spProductDelete")]
    public sealed class ProductInfo : ChangeTrackingEntity
    {
        private int _productID;

        [Key]
        public int ProductID
        {
            get => _productID;
            set => this.SetWithNotify(value, ref _productID);
        }

        private string _productName;

        public string ProductName
        {
            get => _productName;
            set => this.SetWithNotify(value, ref _productName);
        }

        private string _categoryName;

        public string CategoryName
        {
            get => _categoryName;
            set => this.SetWithNotify(value, ref _categoryName);
        }

        private string _companyName;

        public string CompanyName
        {
            get => _companyName;
            set => this.SetWithNotify(value, ref _companyName);
        }

        private string _quantityPerUnit;

        public string QuantityPerUnit
        {
            get => _quantityPerUnit;
            set => this.SetWithNotify(value, ref _quantityPerUnit);
        }

        private decimal _unitPrice;

        public decimal UnitPrice
        {
            get => _unitPrice;
            set => this.SetWithNotify(value, ref _unitPrice);
        }

        private short _unitsInStock;

        public short UnitsInStock
        {
            get => _unitsInStock;
            set => this.SetWithNotify(value, ref _unitsInStock);
        }

        private short _unitsOnOrder;

        public short UnitsOnOrder
        {
            get => _unitsOnOrder;
            set => this.SetWithNotify(value, ref _unitsOnOrder);
        }

        private short _reorderLevel;

        public short ReorderLevel
        {
            get => _reorderLevel;
            set => this.SetWithNotify(value, ref _reorderLevel);
        }

        private bool _discontinued;

        public bool Discontinued
        {
            get => _discontinued;
            set => this.SetWithNotify(value, ref _discontinued);
        }

        private byte[] _lastModified;

        [Ignore(true, true)]
        public byte[] LastModified
        {
            get => _lastModified;
            set => this.SetWithNotify(value, ref _lastModified);
        }

    }
}
