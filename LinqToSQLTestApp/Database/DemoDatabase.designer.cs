#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToSQLTestApp.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\GH\\EntityFrameworkUtils\\DemoData.mdf")]
	public partial class DemoDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    #endregion
		
		public DemoDatabaseDataContext() : 
				base(global::LinqToSQLTestApp.Properties.Settings.Default.DemoDatabase, mappingSource)
		{
			OnCreated();
		}
		
		public DemoDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DemoDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DemoDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DemoDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<StateCode> StateCodes
		{
			get
			{
				return this.GetTable<StateCode>();
			}
		}
		
		public System.Data.Linq.Table<ProductInfo> ProductInfos
		{
			get
			{
				return this.GetTable<ProductInfo>();
			}
		}
		
		public System.Data.Linq.Table<DemoTable> DemoTables
		{
			get
			{
				return this.GetTable<DemoTable>();
			}
		}
		
		private void InsertStateCode(StateCode obj)
		{
			this.spStateCodeAddUpdate(default(string), obj.State, obj.StateDesc);
		}
		
		private void UpdateStateCode(StateCode obj)
		{
			StateCode original = ((StateCode)(StateCodes.GetOriginalEntityState(obj)));
			this.spStateCodeAddUpdate(original.State, obj.State, obj.StateDesc);
		}
		
		private void DeleteStateCode(StateCode obj)
		{
			StateCode original = ((StateCode)(StateCodes.GetOriginalEntityState(obj)));
			this.spStateCodeDelete(original.State);
		}
		
		private void InsertProductInfo(ProductInfo obj)
		{
			System.Nullable<int> p1 = obj.ProductID;
			this.spProductAddUpdate(ref p1, obj.ProductName, obj.CategoryName, obj.CompanyName, obj.QuantityPerUnit, ((System.Nullable<decimal>)(obj.UnitPrice)), ((System.Nullable<short>)(obj.UnitsInStock)), ((System.Nullable<short>)(obj.UnitsOnOrder)), ((System.Nullable<short>)(obj.ReorderLevel)), ((System.Nullable<bool>)(obj.Discontinued)));
			obj.ProductID = p1.GetValueOrDefault();
		}
		
		private void UpdateProductInfo(ProductInfo obj)
		{
			ProductInfo original = ((ProductInfo)(ProductInfos.GetOriginalEntityState(obj)));
			System.Nullable<int> p1 = original.ProductID;
			this.spProductAddUpdate(ref p1, obj.ProductName, obj.CategoryName, obj.CompanyName, obj.QuantityPerUnit, ((System.Nullable<decimal>)(obj.UnitPrice)), ((System.Nullable<short>)(obj.UnitsInStock)), ((System.Nullable<short>)(obj.UnitsOnOrder)), ((System.Nullable<short>)(obj.ReorderLevel)), ((System.Nullable<bool>)(obj.Discontinued)));
			original.ProductID = p1.GetValueOrDefault();
		}
		
		private void DeleteProductInfo(ProductInfo obj)
		{
			ProductInfo original = ((ProductInfo)(ProductInfos.GetOriginalEntityState(obj)));
			this.spProductDelete(((System.Nullable<int>)(original.ProductID)));
		}
		
		private void InsertDemoTable(DemoTable obj)
		{
			System.Nullable<int> p1 = obj.ListKey;
			this.spDemoTableAddUpdate(ref p1, obj.Label, obj.TextValue, ((System.Nullable<System.DateTime>)(obj.DateValue)), ((System.Nullable<bool>)(obj.BoolValue)), obj.XmlValue, ((System.Nullable<System.Guid>)(obj.GuidValue)), obj.ImageValue);
			obj.ListKey = p1.GetValueOrDefault();
		}
		
		private void UpdateDemoTable(DemoTable obj)
		{
			DemoTable original = ((DemoTable)(DemoTables.GetOriginalEntityState(obj)));
			System.Nullable<int> p1 = original.ListKey;
			this.spDemoTableAddUpdate(ref p1, obj.Label, obj.TextValue, ((System.Nullable<System.DateTime>)(obj.DateValue)), ((System.Nullable<bool>)(obj.BoolValue)), obj.XmlValue, ((System.Nullable<System.Guid>)(obj.GuidValue)), obj.ImageValue);
			original.ListKey = p1.GetValueOrDefault();
		}
		
		private void DeleteDemoTable(DemoTable obj)
		{
			DemoTable original = ((DemoTable)(DemoTables.GetOriginalEntityState(obj)));
			this.spDemoTableDelete(((System.Nullable<int>)(original.ListKey)));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spStateCodeAddUpdate")]
		public int spStateCodeAddUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(2)")] string paramOldState, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(2)")] string paramState, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string paramStateDesc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), paramOldState, paramState, paramStateDesc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spStateCodeDelete")]
		public int spStateCodeDelete([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(2)")] string paramState)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), paramState);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spStateCodes")]
		public ISingleResult<StateCode> spStateCodes()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<StateCode>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spProductInfo")]
		public ISingleResult<ProductInfo> spProductInfo([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> paramProductID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), paramProductID);
			return ((ISingleResult<ProductInfo>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spProductSearch")]
		public ISingleResult<spProductSearchResult> spProductSearch([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(40)")] string paramProductName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(15)")] string paramCategoryName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(40)")] string paramCompanyName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), paramProductName, paramCategoryName, paramCompanyName);
			return ((ISingleResult<spProductSearchResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spProductDelete")]
		public int spProductDelete([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> paramProductID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), paramProductID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spProductAddUpdate")]
		public int spProductAddUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> paramProductID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(40)")] string paramProductName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(15)")] string paramCategoryName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(40)")] string paramCompanyName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string paramQuantityPerUnit, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Money")] System.Nullable<decimal> paramUnitPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallInt")] System.Nullable<short> paramUnitsInStock, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallInt")] System.Nullable<short> paramUnitsOnOrder, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallInt")] System.Nullable<short> paramReorderLevel, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> paramDiscontinued)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), paramProductID, paramProductName, paramCategoryName, paramCompanyName, paramQuantityPerUnit, paramUnitPrice, paramUnitsInStock, paramUnitsOnOrder, paramReorderLevel, paramDiscontinued);
			paramProductID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spCategories")]
		public ISingleResult<spCategoriesResult> spCategories()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spCategoriesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spCompanies")]
		public ISingleResult<spCompaniesResult> spCompanies()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spCompaniesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spDemoTableData")]
		public ISingleResult<DemoTable> spDemoTableData()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<DemoTable>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spDemoTableAddUpdate")]
		public int spDemoTableAddUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> paramListKey, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(40)")] string paramLabel, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(40)")] string paramTextValue, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime2")] System.Nullable<System.DateTime> paramDateValue, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> paramBoolValue, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Xml")] System.Xml.Linq.XElement paramXmlValue, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> paramGuidValue, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary paramImageValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), paramListKey, paramLabel, paramTextValue, paramDateValue, paramBoolValue, paramXmlValue, paramGuidValue, paramImageValue);
			paramListKey = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spDemoTableDelete")]
		public int spDemoTableDelete([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> paramListKey)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), paramListKey);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateCode")]
	public partial class StateCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _State;
		
		private string _StateDesc;
		
		private System.Data.Linq.Binary _LastModified;
		
		private bool _IsInUse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnStateDescChanging(string value);
    partial void OnStateDescChanged();
    partial void OnLastModifiedChanging(System.Data.Linq.Binary value);
    partial void OnLastModifiedChanged();
    partial void OnIsInUseChanging(bool value);
    partial void OnIsInUseChanged();
    #endregion
		
		public StateCode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Char(2) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateDesc", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StateDesc
		{
			get
			{
				return this._StateDesc;
			}
			set
			{
				if ((this._StateDesc != value))
				{
					this.OnStateDescChanging(value);
					this.SendPropertyChanging();
					this._StateDesc = value;
					this.SendPropertyChanged("StateDesc");
					this.OnStateDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", AutoSync=AutoSync.OnInsert, DbType="rowversion NOT NULL", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInUse", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsInUse
		{
			get
			{
				return this._IsInUse;
			}
			set
			{
				if ((this._IsInUse != value))
				{
					this.OnIsInUseChanging(value);
					this.SendPropertyChanging();
					this._IsInUse = value;
					this.SendPropertyChanged("IsInUse");
					this.OnIsInUseChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductInfo")]
	public partial class ProductInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _ProductName;
		
		private string _CategoryName;
		
		private string _CompanyName;
		
		private string _QuantityPerUnit;
		
		private decimal _UnitPrice;
		
		private short _UnitsInStock;
		
		private short _UnitsOnOrder;
		
		private short _ReorderLevel;
		
		private bool _Discontinued;
		
		private System.Data.Linq.Binary _LastModified;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnQuantityPerUnitChanging(string value);
    partial void OnQuantityPerUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnUnitsInStockChanging(short value);
    partial void OnUnitsInStockChanged();
    partial void OnUnitsOnOrderChanging(short value);
    partial void OnUnitsOnOrderChanged();
    partial void OnReorderLevelChanging(short value);
    partial void OnReorderLevelChanged();
    partial void OnDiscontinuedChanging(bool value);
    partial void OnDiscontinuedChanged();
    partial void OnLastModifiedChanging(System.Data.Linq.Binary value);
    partial void OnLastModifiedChanged();
    #endregion
		
		public ProductInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(40)", UpdateCheck=UpdateCheck.Never)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(40)", UpdateCheck=UpdateCheck.Never)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityPerUnit", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string QuantityPerUnit
		{
			get
			{
				return this._QuantityPerUnit;
			}
			set
			{
				if ((this._QuantityPerUnit != value))
				{
					this.OnQuantityPerUnitChanging(value);
					this.SendPropertyChanging();
					this._QuantityPerUnit = value;
					this.SendPropertyChanged("QuantityPerUnit");
					this.OnQuantityPerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitsInStock", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short UnitsInStock
		{
			get
			{
				return this._UnitsInStock;
			}
			set
			{
				if ((this._UnitsInStock != value))
				{
					this.OnUnitsInStockChanging(value);
					this.SendPropertyChanging();
					this._UnitsInStock = value;
					this.SendPropertyChanged("UnitsInStock");
					this.OnUnitsInStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitsOnOrder", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short UnitsOnOrder
		{
			get
			{
				return this._UnitsOnOrder;
			}
			set
			{
				if ((this._UnitsOnOrder != value))
				{
					this.OnUnitsOnOrderChanging(value);
					this.SendPropertyChanging();
					this._UnitsOnOrder = value;
					this.SendPropertyChanged("UnitsOnOrder");
					this.OnUnitsOnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReorderLevel", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short ReorderLevel
		{
			get
			{
				return this._ReorderLevel;
			}
			set
			{
				if ((this._ReorderLevel != value))
				{
					this.OnReorderLevelChanging(value);
					this.SendPropertyChanging();
					this._ReorderLevel = value;
					this.SendPropertyChanged("ReorderLevel");
					this.OnReorderLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discontinued", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Discontinued
		{
			get
			{
				return this._Discontinued;
			}
			set
			{
				if ((this._Discontinued != value))
				{
					this.OnDiscontinuedChanging(value);
					this.SendPropertyChanging();
					this._Discontinued = value;
					this.SendPropertyChanged("Discontinued");
					this.OnDiscontinuedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemoTable")]
	public partial class DemoTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ListKey;
		
		private string _Label;
		
		private string _TextValue;
		
		private System.DateTime _DateValue;
		
		private bool _BoolValue;
		
		private System.Xml.Linq.XElement _XmlValue;
		
		private System.Nullable<System.Guid> _GuidValue;
		
		private System.Data.Linq.Binary _ImageValue;
		
		private System.Data.Linq.Binary _LastModified;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnListKeyChanging(int value);
    partial void OnListKeyChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnTextValueChanging(string value);
    partial void OnTextValueChanged();
    partial void OnDateValueChanging(System.DateTime value);
    partial void OnDateValueChanged();
    partial void OnBoolValueChanging(bool value);
    partial void OnBoolValueChanged();
    partial void OnXmlValueChanging(System.Xml.Linq.XElement value);
    partial void OnXmlValueChanged();
    partial void OnGuidValueChanging(System.Nullable<System.Guid> value);
    partial void OnGuidValueChanged();
    partial void OnImageValueChanging(System.Data.Linq.Binary value);
    partial void OnImageValueChanged();
    partial void OnLastModifiedChanging(System.Data.Linq.Binary value);
    partial void OnLastModifiedChanged();
    #endregion
		
		public DemoTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ListKey
		{
			get
			{
				return this._ListKey;
			}
			set
			{
				if ((this._ListKey != value))
				{
					this.OnListKeyChanging(value);
					this.SendPropertyChanging();
					this._ListKey = value;
					this.SendPropertyChanged("ListKey");
					this.OnListKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="VarChar(40) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextValue", DbType="VarChar(40) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TextValue
		{
			get
			{
				return this._TextValue;
			}
			set
			{
				if ((this._TextValue != value))
				{
					this.OnTextValueChanging(value);
					this.SendPropertyChanging();
					this._TextValue = value;
					this.SendPropertyChanged("TextValue");
					this.OnTextValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateValue", DbType="DateTime2 NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateValue
		{
			get
			{
				return this._DateValue;
			}
			set
			{
				if ((this._DateValue != value))
				{
					this.OnDateValueChanging(value);
					this.SendPropertyChanging();
					this._DateValue = value;
					this.SendPropertyChanged("DateValue");
					this.OnDateValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoolValue", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool BoolValue
		{
			get
			{
				return this._BoolValue;
			}
			set
			{
				if ((this._BoolValue != value))
				{
					this.OnBoolValueChanging(value);
					this.SendPropertyChanging();
					this._BoolValue = value;
					this.SendPropertyChanged("BoolValue");
					this.OnBoolValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XmlValue", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement XmlValue
		{
			get
			{
				return this._XmlValue;
			}
			set
			{
				if ((this._XmlValue != value))
				{
					this.OnXmlValueChanging(value);
					this.SendPropertyChanging();
					this._XmlValue = value;
					this.SendPropertyChanged("XmlValue");
					this.OnXmlValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuidValue", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> GuidValue
		{
			get
			{
				return this._GuidValue;
			}
			set
			{
				if ((this._GuidValue != value))
				{
					this.OnGuidValueChanging(value);
					this.SendPropertyChanging();
					this._GuidValue = value;
					this.SendPropertyChanged("GuidValue");
					this.OnGuidValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageValue", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageValue
		{
			get
			{
				return this._ImageValue;
			}
			set
			{
				if ((this._ImageValue != value))
				{
					this.OnImageValueChanging(value);
					this.SendPropertyChanging();
					this._ImageValue = value;
					this.SendPropertyChanged("ImageValue");
					this.OnImageValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class spProductSearchResult
	{
		
		private int _ProductID;
		
		private string _ProductName;
		
		private string _CategoryName;
		
		private string _CompanyName;
		
		private decimal _UnitPrice;
		
		private bool _Discontinued;
		
		public spProductSearchResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this._ProductID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(40)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this._ProductName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(15)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(40)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this._CompanyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Money NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discontinued", DbType="Bit NOT NULL")]
		public bool Discontinued
		{
			get
			{
				return this._Discontinued;
			}
			set
			{
				if ((this._Discontinued != value))
				{
					this._Discontinued = value;
				}
			}
		}
	}
	
	public partial class spCategoriesResult
	{
		
		private string _CategoryName;
		
		public spCategoriesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(15)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
	}
	
	public partial class spCompaniesResult
	{
		
		private string _CompanyName;
		
		public spCompaniesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(40)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this._CompanyName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
